package config

import (
	"flag"
	"time"
)

var (
	// Version of the server. Set at build time using -ldflags "-X github.com/2bytes/8k/internal/config.Version=<version number>"
	Version = "development"

	// ShowVersion displays the version and exits, when provided
	ShowVersion = flag.Bool("v", false, "show version")

	//DataTTL sets the time to keep data before deleting
	DataTTL = flag.Duration("ttl", DefaultTTL, "the time before an uploaded data item expires and is deleted")

	// PageTitle allows overriding the default page title in the UI
	PageTitle = flag.String("title", DefaultPageTitle, "set the title of the web page")
	// AccentColour allows overriding the beautiful orange accent colour
	AccentColour = flag.String("accent-colour", DefaultAccentColour, "set the accent colour for the web page")
	// MaxBytes allows overriding the carefully chosen 8192 byte limit for uploads
	MaxBytes = flag.Int("mb", DefaultMaxBytes, "override the max bytes count")
	//MaxItemsStored sets the maximum number of items to store before disallowing any further storage until some have been scrubber
	MaxItemsStored = flag.Int("mi", DefaultMaxItems, "set the maximum number of items to store before disallowing")
	// PathLength is used to set the length of the auto-generated path part of the URL
	PathLength = flag.Int("pl", DefaultPathLength, "override autogenerated path length")
	// BindTLS enables TLS directly in the server. Do not enable this if using a reverse proxy such as Nginx/Traefik
	BindTLS = flag.Bool("https", DefaultBindTLS, "enable TLS")
	// BindAddress overrides the default bind address
	BindAddress = flag.String("addr", DefaultBindAddress, "set the bind address")
	// BindPort overrides the default bind port of the server
	BindPort = flag.Int("port", DefaultBindPort, "set the bind port")

	// PublicProtoTLS sets whether to use 'https' for links in the UI
	PublicProtoTLS = flag.Bool("ui-https", DefaultPublicProtoTLS, "UI: use 'https' as the proto displayed in the UI text/links")
	// PublicAddress sets the address or hostname used in the UI
	PublicAddress = flag.String("ui-addr", DefaultPublicAddress, "UI: set the public address displayed in the UI text/links")
	// PublicPort sets the port used in the UI
	PublicPort = flag.Int(("ui-port"), DefaultPublicPort, "UI: set the public port displayed in the UI/text/links")

	// UIFileHTML is the path to the HTML file for the UI
	UIFileHTML = flag.String("html", DefaultIndexFilePath, "set the path to the index html template file for the frontend to override the embedded html")

	// TLSCertFile set the location of the TLS certificate file for binding TLS
	TLSCertFile = flag.String("tls-cert", DefaultTLSCertFilePath, "path to the TLS certificate")
	// TLSKeyFile sets the location of the TLS key file for binding TLS
	TLSKeyFile = flag.String("tls-key", DefaultTLSKeyFilePath, "path to the TLS key")
)

// Config holds the server configuration
type Config struct {
	Title          string
	AccentColour   string
	ProtoTLS       bool
	Address        string
	Port           int
	PathLength     int
	BindTLS        bool
	MaxBytes       int
	MaxItemsStored int
	ttl            time.Duration
}

// FormattedTime returns a human readable formatted time for display
func (c *Config) FormattedTime() string {
	return FormatTime(c.ttl)
}

// Get returns the configuration flags for the server
func Get() *Config {
	cfg := &Config{
		Title:          *PageTitle,
		AccentColour:   *AccentColour,
		ProtoTLS:       *PublicProtoTLS || *BindTLS,
		Address:        *PublicAddress,
		Port:           *PublicPort,
		MaxBytes:       *MaxBytes,
		MaxItemsStored: *MaxItemsStored,
		PathLength:     *PathLength,
		ttl:            *DataTTL,
	}

	return cfg
}
